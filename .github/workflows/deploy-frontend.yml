name: Deploy Frontend on main

on:
  push:
    branches: [ main ]

concurrency:
  group: fe-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build
        env:
          # ensure same-origin /api in prod builds
          VITE_API_BASE: /api
        run: npm run build

      # Upload the build to a staging folder on the VPS
      - name: Upload dist/ to VPS (staging)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          source: "dist/*"
          target: "${{ secrets.SERVER_FE_STAGING || '/home/deploy/fe-upload' }}-${{ github.sha }}/"

      # Publish: move to nginx webroot atomically, set perms, reload nginx
      - name: Publish on server (no sudo)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -euo pipefail
            NEW="${{ secrets.SERVER_FE_STAGING || '/home/deploy/fe-upload' }}-${{ github.sha }}"
            WEBROOT="${{ secrets.SERVER_FE_WEBROOT }}"
      
            # ensure target exists
            mkdir -p "$WEBROOT"
      
            # if rsync is available, do a fast/safe sync with delete
            if command -v rsync >/dev/null 2>&1; then
              rsync -a --delete "$NEW"/ "$WEBROOT"/
            else
              # fallback: clean and copy (slower)
              rm -rf "$WEBROOT"/*
              cp -r "$NEW"/* "$WEBROOT"/
            fi
      
            # sane perms so nginx can read (no sudo needed)
            find "$WEBROOT" -type d -exec chmod 755 {} \;
            find "$WEBROOT" -type f -exec chmod 644 {} \;
      
            # nginx auto-serves static files; reload not required for content changes
            rm -rf "$NEW"
      